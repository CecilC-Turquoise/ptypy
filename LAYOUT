Current layout:
          
core/
    sample
    viewmanager
    ptychoBE
    scan
    ptycho
    illumination
    model
    data
    scanmanager
    geometry
engines/
    DM
    dummy
    utils
experiment/
    spec
    data_structure
    I13DLS
    cSAXS
interaction/
    interactor
io/
    plotting
utils/
    utils_BE
    parameters
    wave
    misc
    verbosemod
    parallel
    propagation
simulations/
    ptysim_dict_template
    ptysim_reconstruction
    ptysim
    ptysim_utils
test/
    test_ptycho_class
    test_stack_mapping
    test_things
    test_ptycho_class_model_brainstorming
    test_data_feeder
    test_probe_geo_scan
propagation/

-------------

New layout:

core/
    ptycho
        Ptycho
    containers
        (content of viewmanager and scanmanager
    sample
        (description, initialization, STXM analysis routines, ...)
    illumination
        (description, initialization, focused, pinhole, ...)
    data
        (content of experiment/data_structure + real-time feeding stuff)
engines/
    DM
        DM
        (private utils)
    ML
        ML
        (private utils)
    ePIE
        ePIE
        (private utils)
    dummy
        dummy
        (private utils)
    utils
        (utils common to all engines)
experiment/
    I13DLS
        prepare_data
        (some utils)
    cSAXS
        prepare_data
        (some utils)
    utils
        SpecInfo
interaction/
    interactor
io/
    plotting
    utils
        (read/write routine - cxi format, h5read/h5write, content of pyE17.io ...)
    logging
        (replacement for verbosemod that plays well with the interactor)
utils/
    parameters
    parallel
    wave
    misc
simulations/
    ptysim_dict_template
    ptysim_reconstruction
    ptysim
    ptysim_utils
test/
    (various tests)









(Helper function to get the tree structure:
    
def print_path(s, dirname, filenames):
    s = print_path.s
    # discard .svn
    if dirname.find('/.') >-1:
        print 'disregarding %s' % dirname
        return
    
    # split the directory
    spl = dirname.split('/')
    depth = len(spl) -1
    dname = spl[-1]
    s += (depth*'    ') + dname + '/\n'
    print 'entering %s' % dirname
    # iterate through content
    for f in filenames:
        if f == '__init__.py': continue
        if f.endswith('.py'):
            s += ((depth+1)*'    ') + f.split('.')[0] + '\n'
            print 'found %s' % f
    print_path.s = s
    return
print_path.s = ''
import os
os.path.walk('.',print_path,'')

)